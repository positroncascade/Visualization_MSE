y = sin(x)
plot( x ~ y)
plot( y ~ x)
plot( y ~ x, line)
? plot
plot( y ~ x, "l")
plot( y ~ x, type="l")
x = 1:1000
y = sin(x)
plot( x ~ y , type="l")
plot( y ~ x , type="l")
plot( y ~ x , type="p")
plot( y ~ x , type="")
plot( y ~ x , type="l")
plot( y ~ x , type="p")
help(array)
source("http://bioconductor.org/biocLite.R")
?BiocUpgrade
biocLite("BiocUpgrade")
y
y
install.packages("biomaRt")
biocLite()
biocLite("biomaRt")
choosebank()
library("seqinr")
choosebank()
choosebank("genbank")
query("BRCA1", "SP=Homo sapiens AND K=BRCA1")
library("seqinr")
choosebank("genbank")
query("BRCA1", "SP=Homo sapiens AND K=BRCA1")
attributes(BRCA1)
BRCA1$req
query("BRCA1", "SP=Homo sapiens AND AC=U61268")
myseq <- getSequence(BRCA1$req[[1]])
myseq
dotPlot( myseq, myseq)
length( myseq)
BRCA.variant1 <- getSequence(BRCA1$req[[1]])
length( BRCA.variant1)
query(listname = "BRCA1", query="SP=homo sapiens AND K=BRCA1")
BRCA.variant2 <- getSequence(BRCA1$req[[1]])
x <- seq(1,20)
x
w <- 1 + sqrt(x)/2
w
set.seed(0)
dummy <- data.frame( x=x, y=x + rnorm(x)*w)
dummy
plot( y ~x, main="Random numbers", xlab="x axis", ylab="y axis")
plot( y ~x, data=dummy, main="Random numbers", xlab="x axis", ylab="y axis")
lines( dummy$x, fm)
fm <- lm(y ~ x, data=dummy)
lines( dummy$x, fm)
plot( x, y, data=dummy, main="Random numbers", xlab="Indices", ylab="Values")
plot( x ~y, data=dummy, main="Random numbers", xlab="Indices", ylab="Values")
# Exercise 6: Enter the command fm <- lm(y ~ x, data=dummy) to fit a linear regression
#             model. Add the estimated regression line to the current plot and
#             make it the colour blue.
fm <- lm(y ~ x, data=dummy)
lines( dummy$x, fm)
fm
fm <- lm(y ~ x, data=dummy)
abline(coef(fm), lty=4, col="blue")
abline(coef(fm), lty=3, col="green")
plot( x ~y, data=dummy, main="Random numbers", xlab="Indices", ylab="Values")
# Exercise 6: Enter the command fm <- lm(y ~ x, data=dummy) to fit a linear regression
#             model. Add the estimated regression line to the current plot and
#             make it the colour blue.
fm <- lm(y ~ x, data=dummy)
abline(coef(fm), lty=3, col="green")
abline(coef(fm), lty=5, col="green")
abline(coef(fm), lty=5, col="black")
plot( x ~y, data=dummy, main="Random numbers", xlab="Indices", ylab="Values")
# Exercise 6: Enter the command fm <- lm(y ~ x, data=dummy) to fit a linear regression
#             model. Add the estimated regression line to the current plot and
#             make it the colour blue.
fm <- lm(y ~ x, data=dummy)
abline(coef(fm), lty=5, col="black")
# Exercise 7: Extract the values of the residuals using resids <- resid(fm).
qqline(y = resids, x=dummy$x)
resids <- resid(fm)
qqline(y = resids, x=dummy$x)
plot( x ~y, data=dummy, main="Random numbers", xlab="Indices", ylab="Values")
qqline(y = resids, x=dummy$x)
plot( y ~ x, data=dummy, main="Random numbers", xlab="Indices", ylab="Values")
# Exercise 6: Enter the command fm <- lm(y ~ x, data=dummy) to fit a linear regression
#             model. Add the estimated regression line to the current plot and
#             make it the colour blue.
fm <- lm(y ~ x, data=dummy)
abline(coef(fm), lty=5, col="black")
# Exercise 7: Extract the values of the residuals using resids <- resid(fm).
#             Check that the residuals are normally distributed by creating a Q-Q plot.
resids <- resid(fm)
plot( x ~y, data=dummy, main="Random numbers", xlab="Indices", ylab="Values")
qqline(y = resids, x=dummy$x)
qqline(x=dummy$x, y = resids )
resids <- resid(fm)
plot( x ~y, data=dummy, main="Random numbers", xlab="Indices", ylab="Values")
qqline(x=dummy$x, y = resids )
qqline(y = resids )
qqline(resids)
resids <- resid(fm)
plot( x ~y, data=dummy, main="Random numbers", xlab="Indices", ylab="Values")
qqline(resids)
plot( y ~ x, data=dummy, main="Random numbers", xlab="Indices", ylab="Values")
qqline(resids)
dummy$y
plot( y, data=dummy, main="Random numbers", xlab="Indices", ylab="Values")
qqline(resids)
plot( dummy$y, main="Random numbers", xlab="Indices", ylab="Values")
qqline(resids)
plot( dummy$y ~ x, main="Random numbers", xlab="Indices", ylab="Values")
qqline(resids)
plot( x ~ y, data=dummy, main="Random numbers", xlab="Indices", ylab="Values")
x <- seq(1,20)
x
# Exercise 2: Create a vector w <- 1 + sqrt(x)/2
w <- 1 + sqrt(x)/2
w
# Exercise 3: Create a data frame called dummy, with columns x = x and
#             y = x + rnorm(x)*w. To ensure we all get the same values,
#             set the seed to 0.
set.seed(0)
dummy <- data.frame( x=x, y=x + rnorm(x)*w)
summary(dummy)
# Exercise 5: Plot y versus x using an appropriate plotting command.
#             Put a title on the graph and labels on the axes.
plot( x ~ y, data=dummy, main="Random numbers", xlab="Indices", ylab="Values")
# Exercise 6: Enter the command fm <- lm(y ~ x, data=dummy) to fit a linear regression
#             model. Add the estimated regression line to the current plot and
#             make it the colour blue.
fm <- lm(y ~ x, data=dummy)
abline(coef(fm), lty=5, col="black")
# Exercise 7: Extract the values of the residuals using resids <- resid(fm).
#             Check that the residuals are normally distributed by creating a Q-Q plot.
resids <- resid(fm)
plot( x ~ y, data=dummy, main="Random numbers", xlab="Indices", ylab="Values")
qqline(resids)
airquality
coplot( Ozone ~ Temp, data=airquality)
coplot( Ozone ~ Temp | Wind, data=airquality)
coplot( Ozone ~ Temp | Wind, data=airquality, ncol=4)
coplot( Ozone ~ Temp | Wind, data=airquality)
summary( airquality)
coplot( Ozone ~ Temp | Wind, data=airquality)
hist( Wind, data=airquality)
hist( airquality$Wind)
den <- density( airquality$Wind)
den
lines( den)
hist( airquality$Wind)
den <- density( airquality$Wind)
lines( den)
lines(y = den)
ncol( airquality)
nrow( airquality)
lines( x=seq(1, nrow(airquality)), y=den)
hist( airquality$Wind)
den <- density( airquality$Wind)
den
plot(den)
hist( airquality$Wind)
den <- density( airquality$Wind)
nrow( airquality)
lines( den)
plot( seq(1,nrow( airquality)), den)
nrow( den)
hist( airquality$Wind)
den <- density( airquality$Wind)
nrow( airquality)
lines( density( airquality$Wind))
plot( den )
hist( airquality$Wind)
den <- density( airquality$Wind)
nrow( airquality)
par(new=T)
lines( density( airquality$Wind))
hist( airquality$Wind)
den <- density( airquality$Wind)
nrow( airquality)
par(new=T)
plot( density( airquality$Wind))
hist( airquality$Wind)
den <- density( airquality$Wind)
nrow( airquality)
par(new=T)
plot( density( airquality$Wind), axes=F)
hist( airquality$Wind)
den <- density( airquality$Wind)
nrow( airquality)
par(new=T)
plot( density( airquality$Wind), axes=F)
axis(4)
hist( airquality$Wind)
den <- density( airquality$Wind)
nrow( airquality)
par(new=T)
plot( density( airquality$Wind), axes=F, col="red")
plot( density( airquality$Wind), main=F, axes=F, col="red")
hist( airquality$Wind)
den <- density( airquality$Wind)
nrow( airquality)
par(new=T)
plot( density( airquality$Wind), xlab=F, ylab=F, main=F, axes=F, col="red")
hist( airquality$Wind)
den <- density( airquality$Wind)
nrow( airquality)
par(new=T)
plot( density( airquality$Wind), xlab=NA, ylab=NA, main=NA, axes=F, col="red")
hist( airquality$Wind)
par(new=T)
plot( density( airquality$Wind), xlab=NA, ylab=NA, main=NA, axes=F, col="red")
axis(3)
axis(4)
hist( airquality$Wind)
par(new=T)
plot( density( airquality$Wind), xlab=NA, ylab=NA, main=NA, axes=F, col="red")
axis(4)
hist( airquality$Wind, main="Winds", ylab="Speed [m/s]")
par(new=T)
plot( density( airquality$Wind), xlab=NA, ylab=NA, main=NA, axes=F, col="red")
axis(4)
hist( airquality$Wind, main="Winds", ylab="Frequency", xlab="Speed [m/s]")
par(new=T)
plot( density( airquality$Wind), xlab=NA, ylab=NA, main=NA, axes=F, col="red")
axis(4)
hist( log( airquality$Wind ), main="Winds", ylab="Frequency", xlab="Speed [m/s]")
lines( density( airquality$Wind), col="red")
hist( airquality$Wind, main="Winds", ylab="Frequency", xlab="Speed [m/s]")
lines( density( airquality$Wind), col="red")
axis(4)
# Exercise 1: Create a vector x of the values from 1 to 20.
x <- seq(1,20)
# Exercise 2: Create a vector w <- 1 + sqrt(x)/2
w <- 1 + sqrt(x)/2
# Exercise 3: Create a data frame called dummy, with columns x = x and
#             y = x + rnorm(x)*w. To ensure we all get the same values,
#             set the seed to 0.
set.seed(0)
dummy <- data.frame( x=x, y=x + rnorm(x)*w)
summary(dummy)
hist( dummy$y)
boxplot( dummy$y)
par(mfrow=c(1,2))
hist( dummy$y)
boxplot( dummy$y)
par(mfrow=c(1,2), main="titulo")
hist( dummy$y)
par(mfrow=c(1,2))
hist( dummy$y, main="Histogram")
boxplot( dummy$y, main="Box plot")
par(mfrow=c(1,2))
hist( dummy$y, main="Histogram", ylab='Frequency', xlab='Y values')
boxplot( dummy$y, main="Box plot")
sqrt(-1)
cancor
library(CCA)
install.packages("CCA")
library(CCA)
CCA
ls(2)
cc
rcc
x = rnorm( n = 10)
x
y = 10*rnorm( n=10)
y
correlation = cc( x,y )
data(nutrimouse)
nutrimouse
summary( nutrimouse)
X=as.matrix(nutrimouse$gene[,1:10])
X
Y=as.matrix(nutrimouse$lipid)
Y
res.cc=cc(X,Y)
plot( res.cc$cor, type='b')
plt.cc(res.cc)
ls
#             function in R.) and creates a histogram of the data.
fEx2 <- function(x){
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
# #
)
fEx1 <- function(value){
if( value < 0){
cat("Warning, the sqrt() function ")
}
return c(value^2, value^3, sqrt(value))
}
fEx1 <- function(value)
{
if( value < 0){
cat("Warning, the sqrt() function ")
}
return c(value^2, value^3, sqrt(value))
fEx1 <- function(value)
{
if( value < 0)
{
cat("Warning, the sqrt() function requires a positive integer number ")
return c(value^2, value^3, sqrt(value))
fEx1 <- function(value)
{
if( value < 0)
{
cat("Warning, the sqrt() function requires a positive integer number ")
c(value^2, value^3, sqrt(value))
}
fEx1(5)
fEx1 <- function(value)
{
if( value < 0)
{
cat("Warning, the sqrt() function requires a positive integer number ")
}
c(value^2, value^3, sqrt(value))
}
fEx1(5)
value = 5
c(value^2, value^3, sqrt(value))
# Exercise 2: Write a function that when passed a numeric vector, prints the value of
#             the mean and standard deviation to the screen (Hint: use the cat()
)
funt = function(x){}
funt = function(x){
cat("hello world")
}
funct
funt
funt(2)
c( 2, 2^2, 2^3)
c( 2, 2^2, sqrt(2))
fEx1 <- function(val){
c( val, val^2, sqrt(val))
}
fEx1(5)
fEx1 <- function(val){
if(val < 0){
cat("Cuidado!")
}
c( val, val^2, sqrt(val))
}
fEx1(5)
cat("Testing the function"); fEx1(5)
cat("Results of the function: "); fEx1(5)
fEx2 <- function(x){
cat('Mean=%f sd=%f', mean(x), sd(x))
}
x <- seq(0,2, len=5)
fEx2()
x
fEx2(x)
fEx2 <- function(x){
cat('Mean', mean(x),' standard deviation ' sd(x))
}
x <- seq(0,2, len=5)
fEx2(x)
cat
fEx2 <- function(x){
cat('Mean', mean(x))
}
x <- seq(0,2, len=5)
fEx2(x)
fEx2 <- function(x){
cat("Mean ", mean(x), " standard deviation ", sd(x) )
}
x <- seq(0,2, len=5)
fEx2(x)
fEx2 <- function(x){
cat("Mean ", mean(x), " standard deviation ", sd(x) )
hist(x)
}
x <- seq(0,2, len=5)
fEx2(x)
fEx3 <- function(x, y, z){
if( is.vector(x) && is.vector(y) && is.vector(z)){
return length(x) + length(y) + length(z)
}else{
cat("Invalid arguments, {x,y,z} must be vectors!")
fEx3 <- function(x, y, z){
if( is.vector(x) && is.vector(y) && is.vector(z)){
return length(x) + length(y) + length(z)
}else{
cat("Invalid arguments: x,y and z must be vectors!")
fEx3 <- function(x, y, z){
if( is.vector(x) && is.vector(y) && is.vector(z))
{
return length(x) + length(y) + length(z)
fEx3 <- function(x, y, z){
if( is.vector(x) && is.vector(y) && is.vector(z))
{
return length(x) + length(y) + length(z)
fEx3 <- function(x, y, z){
if( is.vector(x) && is.vector(y) && is.vector(z))
{
return (length(x) + length(y) + length(z))
}
else
{
cat("Invalid arguments: x,y and z must be vectors!")
}
}
fEx3(x,x,x)
fEx3 <- function(x, y, z){
if( is.vector(x) && is.vector(y) && is.vector(z)){
return (length(x) + length(y) + length(z))
}
else{
cat("Invalid arguments: x,y and z must be vectors!")
}
}
fEx3(x,x,x)
result <- 0
for(i in 0:100):
result += i
cat("resultado ", result)
result <- 0
for(i in 0:100):
result <- result + i
cat("resultado ", result)
result <- 0
for(i in 0:100):
result <- result + i
cat("resultado ", result)
result <- 0
for(i in 0:100){
result <- result + i
}
cat("resultado ", result)
result_sum <- sum(0:100)
cat("Result using for: ", result_for, " result using sum function ", result_sum)
result_for <- 0
for(i in 0:100){
result_for <- result_for + i
}
result_sum <- sum(0:100)
cat("Result using for: ", result_for, " result using sum function ", result_sum)
x <- seq(0, 1, 0.05)
plot(x ~x, type='l')
plot(x ~x, type='l', ylab="y")
for(i in 3:5){
lines(x ~ x^i)
}
x^2
x^3
}
for(i in 3:5){
lines(x , x^i)
}
x <- seq(0, 1, 0.05)
plot(x ~x, type='l', ylab="y")
for(i in 3:5){
lines(x , x^i)
}
x <- seq(0, 1, 0.05)
plot(x ~x, type='l', ylab="y")
for(i in 3:5){ lines(x , x^i)}
fEx1 <- function(val){
if(val < 0){
Message("Warning, sqrt function requires a positive integer number")
}
c( val, val^2, sqrt(val))
}
cat("Results of the function: "); fEx1(5)
fEx1 <- function(val){
if(val < 0){
Message("Warning, sqrt function requires a positive integer number")
}
c( val, val^2, sqrt(val))
}
cat("Results of the function: "); fEx1(-5)
fEx1 <- function(val){
if(val < 0){
message("Warning, sqrt function requires a positive integer number")
}
c( val, val^2, sqrt(val))
}
cat("Results of the function: "); fEx1(-5)
fEx1 <- function(val){
if(val < 0){
message("Warning, sqrt function requires a positive integer number")
}else{
c( val, val^2, sqrt(val))
}
}
cat("Results of the function: "); fEx1(-5)
fEx2 <- function(x){
if( is.numeric(x)){
cat("Mean ", mean(x), " standard deviation ", sd(x) )
hist(x)
}else{
message("The argument is not valid, must be a numeric vector")
}
}
x <- seq(0,2, len=5)
fEx2(x)
fEx2 <- function(x){
if( is.vector(x) && is.numeric(x) ){
cat("Mean ", mean(x), " standard deviation ", sd(x) )
hist(x)
}else{
message("The argument is not valid, must be a numeric vector")
}
}
x <- seq(0,2, len=5)
fEx2(x)
setwd("~/Google Drive/MSc MSE/Visualization and data modelling/GitHubCode/Lecture 3/sweave_work")
install.packages("xtable")
